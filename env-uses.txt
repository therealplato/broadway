cmd/server.go:19:	// err := s.Run(env.ServerHost)
deployment/config.go:30:		env.K8sServicePort,
deployment/config.go:31:		env.K8sServiceHost,
deployment/config.go:65:		Host:        "https://" + env.K8sServiceHost + ":" + env.K8sServicePort,
deployment/config.go:75:	if env.K8sServiceHost != "" && env.K8sCertFile != "" &&
deployment/config.go:76:		env.K8sKeyFile != "" && env.K8sCAFile != "" {
deployment/config.go:79:			Host: env.K8sServiceHost,
deployment/config.go:81:				CertFile: env.K8sCertFile,
deployment/config.go:82:				KeyFile:  env.K8sKeyFile,
deployment/config.go:83:				CAFile:   env.K8sCAFile,
deployment/manifest.go:61:		path := filepath.Join(env.ManifestsPath, filename)
deployment/manifest.go:68:		path := filepath.Join(env.ManifestsPath, filename)
deployment/kubernetes.go:48:	namespace = env.K8sNamespace
deployment/playbook.go:48:	AllPlaybooks, err = LoadPlaybookFolder(env.PlaybooksPath)
deployment/playbook_test.go:86:	mockPlaybookPath = filepath.Join(env.PlaybooksPath, MockPlaybookFilename)
deployment/playbook_test.go:276:	pbs, err := LoadPlaybookFolder(env.PlaybooksPath)
env/env.go:59:// LoadEnvs sets env.* variables to their OS-provided value
instance/instance.go:45:	return env.EtcdPath + "/instances/" + i.PlaybookID + "/" + i.ID
instance/repository.go:76:	path := env.EtcdPath + "/instances/" + playbookID + "/" + ID
instance/repository.go:83:	data := ir.store.Values(fmt.Sprintf(env.EtcdPath+"/instances/%s", playbookID))
notification/slack.go:62:	if env.SlackWebhook == "" {
notification/slack.go:71:	glog.Infof("Sending Slack message to %s", env.SlackWebhook)
notification/slack.go:72:	resp, err := http.Post(env.SlackWebhook, "application/json", bytes.NewReader(value))
notification/slack_test.go:28:	env.SlackWebhook = ts.URL
server/server.go:56:		slackToken: env.SlackToken,
server/server.go:64:	ms := services.NewManifestService(env.ManifestsPath)
server/server.go:106:	if len(a) == 0 || a != env.AuthBearerToken {
server/server.go:107:		glog.Infof("Auth failure for %s\nExpected: %s Actual: %s\n", c.Request.URL.Path, env.AuthBearerToken, a)
server/server_test.go:33:	req.Header.Set("Authorization", "Bearer "+env.AuthBearerToken)
server/server_test.go:38:	env.SlackToken = testToken
server/server_test.go:45:	env.SlackToken = ""
server/server_test.go:52:	env.AuthBearerToken = "testtoken"
server/server_test.go:61:	env.AuthBearerToken = "testtoken"
server/server_test.go:70:	env.AuthBearerToken = "testtoken"
server/server_test.go:245:	env.SlackToken = testToken
server/server_test.go:255:	env.SlackToken = testToken
server/server_test.go:267:	env.SlackToken = testToken
server/server_test.go:285:	env.SlackToken = testToken
server/server_test.go:306:	env.SlackToken = testToken
server/server_test.go:327:	env.SlackToken = testToken
services/deployment_test.go:18:	manifests, err := NewManifestService(env.ManifestsPath).LoadManifestFolder()
services/deployment_test.go:23:	playbooks, err := deployment.LoadPlaybookFolder(env.PlaybooksPath)
services/deployment_test.go:71:	manifests, err := NewManifestService(env.ManifestsPath).LoadManifestFolder()
services/deployment_test.go:76:	playbooks, err := deployment.LoadPlaybookFolder(env.PlaybooksPath)
services/helper_test.go:29:	env.SlackWebhook = n.ts.URL
services/manifest_test.go:41:	ms := NewManifestService(env.ManifestsPath)
services/manifest_test.go:42:	assert.Equal(t, env.ManifestsPath, ms.rootFolder)
services/manifest_test.go:46:	ms := NewManifestService(env.ManifestsPath)
services/manifest_test.go:58:	ms := NewManifestService(env.ManifestsPath)
services/manifest_test.go:69:	ms := NewManifestService(env.ManifestsPath)
services/manifest_test.go:95:	ms := NewManifestService(env.ManifestsPath)
services/instance_test.go:14:	store.New().Delete(env.EtcdPath + "/instances")
services/slack.go:27:	ms := NewManifestService(env.ManifestsPath)
services/slack.go:150:	ms := NewManifestService(env.ManifestsPath)
store/etcd.go:17:	endpoints := strings.Split(env.EtcdEndpoints, ",")
